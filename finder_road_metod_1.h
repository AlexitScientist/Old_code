
#include <vector>

//Структура для удобства передачи координат
struct Cor {

	int x;
	int y;

};

class Road;


class Finder
{
public:
	std::vector<Cor> WinRoads;                     // Создаем вектор правильного пути (для сохранения в него кратчайшего пути к финишу)
	std::vector<Road> myRoad;                      // Создаем вектор дорог (для доступа к ним и их перебора)
	Cor Finish;                                    // Координаты финиша
	Cor Start;                                     // Координаты старта

						//-------------------Карты (создаем динамически для экономии...)-----------------------//
	int** OldMap;         // Карта мира 
	bool** realMap;       // Карта открытой области (уже пройденные ячейки).

	bool win_tru;
	Cor razmer;


	Finder(Cor frooom, Cor tooo, int** cit, Cor razm); // Конструктор (координаты старта // координаты финиша // указатель на массив // размерность массива)

							//--------------Процедура поиска---------------//
	bool find();

	//-----------------------------Создаем еше 1ну дорогу--------------------------------//
	void Set_road(Cor newi, std::vector<Cor> &Olds);
	// ---------------Копируем путь и удаляем дороги----------------------------//
	void finish(std::vector<Cor> OldRoads) {
		// Проверка коректности
		bool realWin(true);
		for (size_t i(0); i < OldRoads.size(); i++) {
			if (realMap[OldRoads[i].x][OldRoads[i].y]) { realWin = false; };
		}
		// Вывод результата
		if (realWin) {
			std::vector<Cor> WinRoads(OldRoads); // Копируем путь из вектора в  главный класс.	
			myRoad.clear();                      // Удаляем все маршруты.
		};
	};

	~Finder();

};

void Finder::Set_road(Cor newi, std::vector<Cor> &Olds) {

	myRoad.push_back(Road(newi));   
	myRoad.back->OldRoads = Olds;   // Копируем пройденый путь старой дороги в новую.
	myRoad.back->rooad = *this;     // Задаем указатель на класс создатель.

};

Finder::Finder(Cor frooom, Cor tooo, int** cit, Cor razm)  // откуда. куда. карта. ее размер 
{

	Finish = tooo;               // Записываем координаты финиша...
	Start = frooom;              // Записываем координаты старта...
	razmer = razm;				 // Записываем размер карты...

								 // Создаем динамические массивы для карт 
	OldMap = new int*[razm.x];
	realMap = new bool*[razm.x];
	for (int k(0); k < razm.y; k++) {
		realMap[razm.x] = new bool[razm.y];
		OldMap[razm.x] = new int[razm.y];
	};

	// Заполняем массивы данными...
	for (int i(0); i < razm.x; i++) {
		for (int j(0); j < razm.y; j++) {
			realMap[i][j] = false;      // Обнуляем карту (путей)
			OldMap[i][j] = cit[i][j];   // Заполняем карту маршрутов.
										 
		}
	}


	realMap[Start.x][Start.y] = true;  // Обозначаю Старт на карте  (Лучше перенести в массив дорог)
	myRoad.push_back(Road(Start));     // Создаю 1й путь
	myRoad.back->rooad = *this;        // Даем доступ к данному классу.
	win_tru = false;
};



bool Finder::find() {

	while (!win_tru)
	{
		// Перебор Сушествуюших дорог
		for (size_t i(0); i < myRoad.size(); i++) {

			win_tru = myRoad[i].finder();
		}
	}
};

//-----------------------------------------Деструктор--------------------------------------------//
Finder::~Finder()
{
	// Освобождаем память выделенную под карты.
	for (int i(0); i < razmer.x; i++) {
		delete[] realMap[i];
		delete[] OldMap[i];
	}
	delete[] realMap;
	delete[] OldMap;

}


class Road
{
public:
	Finder* rooad;                   // Для обрашения к данным карты. 
	std::vector<Cor> OldRoads;       // Для записи пройденного пути.
	bool neew;                       // Переменная ответсвенная за состояния изменения вектора.	
	Road(Cor im);                    // Конструктор с 1м аргументом...
	Road();
	//------------------------------Процедура проверки(и деления)-------------------------------------------//
	bool finder() {

		Cor  im;                // Копируем предыдушую позицию сюда...( для избежания дальнейшего затирания)
		im = OldRoads.back();   

		neew = true;            // Указывает на то что данный вектор/путь еше не был продолжен 

								// 1 - Проверка возможности пути  (в право) 

		if (rooad->OldMap[im.x + 1][im.y] == 1) {
			// 2 - проверка известности данного маршрута (1 - он был пройден 0 - он еше небыл пройден)
			if (rooad->realMap[im.x + 1][im.y] == false) {
				// 3 - Проверка являются ли данные координаты координатами финиша
				if ((rooad->Start.x != (im.x + 1)) && (rooad->Start.y != im.y)) {

					im.x = im.x + 1;              // Указываем новое положение.

					if (neew) {
						OldRoads.push_back(Cor(im));         // Добавим новое положение к пути.
						im.x = im.x - 1;                     // Откат изменений
						neew = false;                        // Вектор был создан (остальные будут его копией...)
					}
					else {

						rooad->Set_road(im, OldRoads); // Если обнаружен еше 1н вариант дороги.(Создаем еше 1-ну дорогу  + копируем туда старый маршрут)
					}

				}
				else {

					//Проверяем остался ли данный путь актуальным на момент финиша...
					rooad->finish(OldRoads); //Данный путь привел к финишу (передаем главному классу путь) + Запускаем удаление (всех) классов дороги.
					return true;
				}
			}
		};

		// 1 - Проверка возможности пути  (в верх) 

		if (rooad->OldMap[im.x][im.y + 1] == 1) {
			// 2 - проверка известности данного маршрута (1 - он был пройден 0 - он еше небыл пройден)
			if (rooad->realMap[im.x][im.y + 1] == false) {

				// 3 - Проверка являются ли данные координаты координатами финиша
				if ((rooad->Start.x != (im.x)) && (rooad->Start.y != im.y + 1)) {

					im.y = im.y + 1;       // Указываем новое положение.
					if (neew) {

						OldRoads.push_back(Cor(im));         // Добавим новое положение к пути.
						im.y = im.y - 1;                     // Откат изменений
						neew = false;                        // Вектор был создан (остальные будут его копией...)

					}
					else {
						rooad->Set_road(im, OldRoads); // Если обнаружен еше 1н вариант дороги.(Создаем еше 1-ну дорогу  + копируем туда старый маршрут)
					}
				}
				else {
					rooad->finish(OldRoads); //Данный путь привел к финишу (передаем главному классу путь) + Запускаем удаление (всех) классов дороги.
					return true;
				}
			}
		};


		// 1 - Проверка возможности пути  (в лево)
		if (rooad->OldMap[im.x - 1][im.y] == 1) {
			// 2 - проверка известности данного маршрута (1 - он был пройден 0 - он еше небыл пройден)
			if (rooad->realMap[im.x - 1][im.y] == false) {
				// 3 - Проверка являются ли данные координаты координатами финиша
				if ((rooad->Start.x != (im.x - 1)) && (rooad->Start.y != im.y)) {

					im.x = im.x - 1;                     // Указываем новое положение.
					if (neew) {

						OldRoads.push_back(Cor(im));         // Добавим новое положение к пути.
						im.x = im.x + 1;                     // Откат изменений
						neew = false;                        // Вектор был создан (остальные будут его копией...)

					}
					else {
						rooad->Set_road(im, OldRoads); // Если обнаружен еше 1н вариант дороги.(Создаем еше 1-ну дорогу  + копируем туда старый маршрут)
					}

				}
				else {
					rooad->finish(OldRoads); // Данный путь привел к финишу (передаем главному классу путь) + Запускаем удаление (всех) классов дороги.
					return true;
				}
			}
		};

		// 1 - Проверка возможности пути  (в низ) 
		if (rooad->OldMap[im.x][im.y - 1] == 1) {

			if (rooad->realMap[im.x][im.y - 1] == false) {
				// 3 - Проверка являются ли данные координаты координатами финиша
				if ((rooad->Start.x != (im.x)) && (rooad->Start.y != im.y - 1)) {
					
					im.y = im.y - 1;                     // Указываем новое положение.
					if (neew) {

						OldRoads.push_back(Cor(im));         // Добавим новое положение к пути.
						im.y = im.y + 1;
						neew = false;                        // Вектор был создан (остальные будут его копией...)
					}
					else {
						rooad->Set_road(im, OldRoads); // Если обнаружен еше 1н вариант дороги.(Создаем еше 1-ну дорогу  + копируем туда старый маршрут)

					}

				}
				else {
					rooad->finish(OldRoads); //Данный путь привел к финишу (передаем главному классу путь) + Запускаем удаление (всех) классов дороги.
					return true;
				}
			}
		};

		// Есле в ходе проверки дальнейшее передвижение оказалось невозможным. (добавить айди дороги чтобы случайно нестереть другие.)
		if (neew) {

			rooad->myRoad.erase(*this); // Hемного неправильно написал (исправлю)
			//(возможно потребуется выход в главный класс)
		};
		return false;
	};

	~Road();

private:

};

Road::Road() {

};

Road::Road(Cor im)
{
	neew = false;
	OldRoads.push_back(Cor(im));// Записываем координаты после перехода
};

Road::~Road()
{
};
